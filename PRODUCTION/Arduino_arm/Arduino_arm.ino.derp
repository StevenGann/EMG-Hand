//==================FAU Engineering Design====================
//-----------------(Fall 2013 / Spring 2014)------------------
//Electrical/Computer Engineering: Team #7
//          Mechanical Engineering: Team #1
//-------------------------------------------------------+
//Project: EMG-Controlled Robotic Arm on Mobile Platform |
//-------------------------------------------------------+
//
//~~~~~~~The Team:~~~~~~~
// Juan Remirez,  EE
// Daniel Parent, EE
// Jared Lee,     EE
// Craig Ades,    ME
// Steven Gann,   CE
//~~~~~~~~~~~~~~~~~~~~~~~
//============================================================
//  This File: Arduino_arm
//
// Description:
//    Controls the 5 servos of the hand, the H-bridges for the
//    shoulder and elbow motors, measures current draw from
//    the motors, and reads pressure sensors mounted an each
//    finger tip. Sends all of the data to the central PC.

// Dev notes:
//    Data that this MCU needs to move:
//     -> Shoulder angle (0 to 360)
//     -> Elbow angle    (0 to 360)
//     -> Servo 1        (0 to 100)
//     -> Servo 2        (0 to 100)
//     -> Servo 3        (0 to 100)
//     -> Servo 4        (0 to 100)
//     -> Servo 5        (0 to 100)
//
//     <- Shoulder current   (0 to 1024)
//     <- Elbow current      (0 to 1024)
//     <- Pressure sensor 1  (0 to 1024)
//     <- Pressure sensor 2  (0 to 1024)
//     <- Pressure sensor 3  (0 to 1024)
//     <- Pressure sensor 4  (0 to 1024)
//     <- Pressure sensor 5  (0 to 1024)
//     <- Pressure sensor 6  (0 to 1024)
//     <- Pressure sensor 7  (0 to 1024)
//     <- Pressure sensor 8  (0 to 1024)
//     <- Pressure sensor 9  (0 to 1024)
//     <- Pressure sensor 10 (0 to 1024)

// This board serves as the main data conduit between the robot-side and control-side.
// Serial:  Arm Mega to onboard PC.
// Serial1: Arm Mega to control PC via Xbee.


//---Servo Controller Stuff---
//#include <Wire.h>
//#include <Adafruit_PWMServoDriver.h>

//Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

//#define SERVOMIN  150 // this is the 'minimum' pulse length count (out of 4096)
//#define SERVOMAX  600 // this is the 'maximum' pulse length count (out of 4096)

#include <Servo.h>
#define SERVOMIN  0
#define SERVOMAX  180

Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;
Servo servo5;

//---ADC Stuff---
#include <MCP3008.h>

#define CLOCK_PIN 38
#define MOSI_PIN 34
#define MISO_PIN 36
#define CS_PIN 32

#define CLOCK_PIN1 37
#define MOSI_PIN1 33
#define MISO_PIN1 35
#define CS_PIN1 31

// put pins inside MCP3008 constructor
MCP3008 adc1(CLOCK_PIN, MOSI_PIN, MISO_PIN, CS_PIN);
MCP3008 adc2(CLOCK_PIN1, MOSI_PIN1, MISO_PIN1, CS_PIN1);

//---H-Bridge Stuff---
//Digital pins
int motorA_1 = 2;
int motorA_2 = 3;
int motorB_1 = 4;
int motorB_2 = 5;

//Motor states
int motorA = 0; //0 = Brake
int motorB = 0; //1 = Forward
                //2 = Backward
int pwmA = 0;//PWM values
int pwmB = 0;

//Potentiometers
int forearmpin = A0;
int shoulderpin = A1;




//---Global Variables---
//Inputs
int servoVal[5] = {90,90,90,90,90};
int shoulderTarget = 0;
int elbowTarget = 0;
//Outputs
int adcVal[10];
String outPacket = "";
int currentA = 0;
int currentB = 0;
//Internals


//===============================================================
void setup()
{
    Serial.begin(115200);//Onboard PC
    Serial1.begin(9600); //Xbee
    
	//pwm.begin();
	//pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates

    servo1.attach(9);
    servo2.attach(10);
    servo3.attach(11);
    servo4.attach(12);
    servo5.attach(13);
	
    pinMode(motorA_1, OUTPUT);
    pinMode(motorA_2, OUTPUT);
    pinMode(motorB_1, OUTPUT);
    pinMode(motorB_2, OUTPUT);
	
	
}
//---------------------------------------------------------------
void loop() 
{
	while(Serial1.available() > 0) //when there's information being received through serial go into this loop
	{
        //TO DO: Expand to send all of the packet to the PC, and back again.
		int xbeeRaw[10];
		
		
		//0,0,90,90,90,90,90,35,35,0
		xbeeRaw[0] = Serial1.parseInt();
		xbeeRaw[1] = Serial1.parseInt();
		xbeeRaw[2] = Serial1.parseInt();
		xbeeRaw[3] = Serial1.parseInt();
		xbeeRaw[4] = Serial1.parseInt();
		xbeeRaw[5] = Serial1.parseInt();
		xbeeRaw[6] = Serial1.parseInt();
		xbeeRaw[7] = Serial1.parseInt();
		xbeeRaw[8] = Serial1.parseInt();
		xbeeRaw[9] = Serial1.parseInt();
		
			shoulderTarget = xbeeRaw[0];
			elbowTarget = xbeeRaw[0];
			servoVal[0] = xbeeRaw[0];
			servoVal[1] = xbeeRaw[0];
			servoVal[2] = xbeeRaw[0];
			servoVal[3] = xbeeRaw[0];
			servoVal[4] = xbeeRaw[0];
		
			int restOfPacket[3];
		
			restOfPacket[0] = xbeeRaw[0];
			restOfPacket[1] = xbeeRaw[0];
			restOfPacket[2] = xbeeRaw[0];
			pwmA = restOfPacket[0];
			pwmB = restOfPacket[1];
		
		
		//Serial.println(String(restOfPacket[0]) + "," + String(restOfPacket[1]) + "," + String(restOfPacket[2]) + "\n");
		serial1Flush();
        //Serial1.println(String(servoVal[0])+","+String(servoVal[1])+","+String(servoVal[2])+","+String(servoVal[3])+","+String(servoVal[4])+","+String(pwmA)+","+String(pwmB));
                
		//mapServos();
		updateServos();
		
		serial1Flush();
		
	}
	
	updateADC();
	
	//manageArmMotors();
	updateHbridge();
	
	//buildPacket();
	//sendPacket();
}
//===============================================================



//===============================================================
void serial1Flush()
{
	while(Serial.available()>0) Serial.read(); 
	//Flushes any other values in the buffer
}

//===============================================================
void mapServos()
{
	//Takes a percentage and maps it between the max and min values
	//of the servo controller. This works out neatly to 0 and 180
	//degrees. Fancy that.
	
	servoVal[0] = map(servoVal[0],0,100,SERVOMIN,SERVOMAX);
	servoVal[1] = map(servoVal[1],0,100,SERVOMIN,SERVOMAX);
	servoVal[2] = map(servoVal[2],0,100,SERVOMIN,SERVOMAX);
	servoVal[3] = map(servoVal[3],0,100,SERVOMIN,SERVOMAX);
	servoVal[4] = map(servoVal[4],0,100,SERVOMIN,SERVOMAX);
}

//===============================================================
void updateServos()
{
	//Writes the new servo positions to the servo controller.
	
	//pwm.setPWM(0, 0, servoVal[0]);
	//pwm.setPWM(1, 0, servoVal[1]);
	//pwm.setPWM(2, 0, servoVal[2]);
	//pwm.setPWM(3, 0, servoVal[3]);
	//pwm.setPWM(4, 0, servoVal[4]);

        servo1.write(servoVal[0]);
	servo2.write(servoVal[1]);
	servo3.write(servoVal[2]);
        servo4.write(servoVal[3]);
        servo5.write(servoVal[4]);
}

//===============================================================
void updateADC()
{
	//Reads the MCP3008 ADC chips and stores their values in an
	//array to be later added to the output packet.
	
	adcVal[0] = adc1.readADC(0);
	adcVal[1] = adc1.readADC(1);
	adcVal[2] = adc1.readADC(2);
	adcVal[3] = adc1.readADC(3);
	adcVal[4] = adc1.readADC(4);
	adcVal[5] = adc2.readADC(0);
	adcVal[6] = adc2.readADC(1);
	adcVal[7] = adc2.readADC(2);
	adcVal[8] = adc2.readADC(3);
	adcVal[9] = adc2.readADC(4);
}

//===============================================================
void buildPacket()
{
	//This function builds a single CSV string to be sent to the
	//central PC via serial, where it is split apart and dealt
	//with as needed.
	
        //TO DO: Modify to take data from onboard PC  on Serial and send to control PC on Serial1.

	outPacket = String(currentA) + "," +
		    String(currentB) + "," +
		    String(adcVal[0]) + "," +
		    String(adcVal[1]) + "," +
		    String(adcVal[2]) + "," +
		    String(adcVal[3]) + "," +
		    String(adcVal[4]) + "," +
		    String(adcVal[5]) + "," +
		    String(adcVal[6]) + "," +
		    String(adcVal[7]) + "," +
		    String(adcVal[8]) + "," +
	            String(adcVal[9]);
}

//===============================================================
void sendPacket()
{
	Serial.println(outPacket);
}

//===============================================================
void updateHbridge()
{
	//Give specific values for motor state and PWM duty cycle,
	//this code will interface with Juan's custom H-bridge design.
	
    switch (motorA) 
    {
        case 0:
        analogWrite(motorA_1, 0);
        analogWrite(motorA_2, 0);
        break;
        case 1:
        analogWrite(motorA_1, 0);
        analogWrite(motorA_2, pwmA);
        break;
        case 2:
        analogWrite(motorA_1, pwmA);
        analogWrite(motorA_2, 0);
        break;
    }
    
    switch (motorB) 
    {
        case 0:
        analogWrite(motorB_1, 0);
        analogWrite(motorB_2, 0);
        break;
        case 1:
        analogWrite(motorB_1, 0);
        analogWrite(motorB_2, pwmB);
        break;
        case 2:
        analogWrite(motorB_1, pwmB);
        analogWrite(motorB_2, 0);
        break;
    }
    
    currentA = analogRead(A0);
    currentB = analogRead(A1);
}

//===============================================================

void manageArmMotors()
{
	//Give target angles, the motors will attempt to move to match
	//those angles with a PWM duty cycle directly related to the
	//angular distance between the current position and the target
	//position.
	
	//Motor A: Shoulder
	//Motor B: Elbow
	
	//H-Bridge notes:
	//int motorA = 0; //0 = Brake
	//int motorB = 0; //1 = Forward
	//                //2 = Backward
	//int pwmA = 0;//PWM values
	//int pwmB = 0;
	
	int margin = 3;
	int d = 0;
	int pwmMax = 128; //128 = 50% RPM
	motorA = 0;
	motorB = 0;
	
	int forearmPot = analogRead(forearmpin);
	int shoulderPot = analogRead(shoulderpin);
	
	int elbowAngle = potToAngle_forearm(forearmPot);
	int shoulderAngle = potToAngle_shoulder(shoulderPot);
	
        d = abs(shoulderAngle - shoulderTarget);
        //Serial.println("d: " + String(d));

	if (shoulderAngle > (shoulderTarget + margin))
	{
		pwmA = 40;//25 + map(d,0,80,0,pwmMax);
		motorA = 2;
                
		//Serial.println("shoulderAngle too high. " + String(shoulderAngle) + ">" + String(shoulderTarget) + " pwmA:" + String(pwmA));
	}
	if (shoulderAngle < (shoulderTarget - margin))
	{
		pwmA = 255;//25 + map(d,0,80,0,pwmMax);
		motorA = 1;
                
		//Serial.println("shoulderAngle too low. " + String(shoulderAngle) + "<" + String(shoulderTarget) + " pwmA:" + String(pwmA));
	}
	
        d = abs(elbowAngle - elbowTarget);
	
	if (elbowAngle > (elbowTarget + margin))
	{
		d = abs(elbowAngle - elbowTarget);
		pwmB = 55;//25 + map(d,0,85,0,pwmMax);
		motorB = 1;
	}
	if (elbowAngle < (elbowTarget - margin))
	{
		d = abs(elbowAngle - elbowTarget);
		pwmB = 75;//25 + map(d,0,85,0,pwmMax);
		motorB = 2;
	}
}

//===============================================================
int potToAngle_shoulder(int p)
{
    int a = 0;
    a = (0.2682f * (float)p) - 142.6f;
    return a;
}
//===============================================================
int potToAngle_forearm(int p)
{
    int a = 0;
    a = (0.2256f * (float)p) - 186.1f;
    return a;
}
//===============================================================
int angleToPot_shoulder(int a)
{
    int p = 0;
    p = (3.494f * (float)a) + 498.253f;
    return p;
}
//===============================================================
int angleToPot_forearm(int a)
{
    int p = 0;
    p = (4.4326f * (float)a) + 824.911f;
    return p;
}
//===============================================================


